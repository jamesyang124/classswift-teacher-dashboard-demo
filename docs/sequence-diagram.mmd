sequenceDiagram
    participant T as Teacher
    participant UI as Frontend (React)
    participant WS as WebSocket Manager
    participant API as Backend (Go)
    participant DB as PostgreSQL
    participant S as Student

    Note over T,S: ClassSwift Teacher Dashboard - Multi-Class Enrollment System

    %% Class List and Selection
    rect rgb(240, 248, 255)
        Note over T,DB: 1. Class List Navigation
        T->>UI: Open ClassSwift Dashboard
        UI->>API: GET /api/v1/classes
        API->>DB: SELECT * FROM classes
        DB-->>API: Return class list
        API-->>UI: Classes with metadata
        UI-->>T: Display Class List (real DB data)
        T->>UI: Select class (e.g., "302 Science")
    end

    %% QR Code Generation and Display
    rect rgb(245, 255, 245)
        Note over T,API: 2. QR Code Generation (Left Modal)
        T->>UI: Open left modal
        UI->>API: GET /api/v1/classes/X58E9647/qr
        API-->>UI: QR code + join URL
        UI-->>T: Display QR code (redirects to frontend join page)
        Note over T: QR code displayed on classroom projector
    end

    %% Student Joining Flow
    rect rgb(255, 248, 240)
        Note over S,DB: 3. Student Joining (Guest vs Enrolled)
        S->>S: Scan QR code with mobile device
        S->>UI: Land on frontend join page
        S->>UI: Enter name and click "Join Class"
        UI->>API: POST /api/v1/classes/X58E9647/join (X-Student-Name header)
        API->>DB: Check FindStudentPreferredSeat(name)
        alt Student Found in Database
            Note over DB: Enrolled student with preferred seat
            DB-->>API: Return student ID + preferred seat
            API->>API: Assign preferred seat (if available)
        else Student Not Found
            Note over API: Treat as guest student
            API->>API: Assign lowest available seat (1-30)
        end
        API->>WS: Broadcast "class_updated" message
        WS-->>UI: Real-time seat update (WebSocket priority)
        UI->>UI: Update Redux store via updateSeatFromWebSocket
        UI-->>T: Student appears with animation
        Note over UI: Blue card (enrolled) or Gray card (guest)
    end

    %% Real-time Updates and Animation
    rect rgb(248, 240, 255)
        Note over T,UI: 4. Real-time Student Grid Updates
        UI->>UI: Check animation trigger (useSeatUpdates)
        Note over UI: Only newly seated students animate
        UI->>UI: Apply smooth CSS transitions via requestAnimationFrame
        UI->>UI: Update Redux store (WebSocket priority over local state)
        Note over UI: Seat conflicts resolved by removing from previous class
        T->>T: See student in 5-column grid
        Note over T: Student count updates (16/30)
    end

    %% Score Management
    rect rgb(255, 245, 245)
        Note over T,UI: 5. Score Management (0-100 System - Redux Only)
        T->>UI: Click + button on enrolled student card
        UI->>UI: Update score in Redux store (immediate)
        UI-->>T: Immediate visual feedback
        Note over UI: Blue badge shows new score (0-100 range)
        Note over UI: Guest students have disabled score controls
        
        T->>UI: Click - button (if score > 0)
        UI->>UI: Prevent if score = 0 (disabled button)
        Note over UI: Minimum constraint enforced, no backend persistence
    end

    %% Group Formation
    rect rgb(240, 255, 240)
        Note over T,UI: 6. Automatic Group Formation
        T->>UI: Switch to "Group" tab
        UI->>UI: Generate groups (5 students each)
        UI->>UI: Create visual containers (rounded borders)
        Note over UI: Enrolled students first, then guests
        UI-->>T: Display grouped students
        Note over T: Groups: 4 groups of 5 + 1 group of 3 (for 23 students)
    end

    %% Multi-Class Support with Seat Conflict Resolution
    rect rgb(255, 255, 240)
        Note over T,DB: 7. Multi-Class Navigation & Seat Conflicts
        T->>UI: Close modals, return to Class List
        UI-->>T: Show Class List (real DB classes)
        T->>UI: Select different class
        UI->>API: GET /api/v1/classes/B72F4891/students
        API->>DB: SELECT current seated students for this class
        DB-->>API: Students for this class
        API-->>UI: Independent student data
        UI-->>T: New class with different enrollments
        Note over T: Students can be in multiple classes
        
        alt Student joins new class while seated elsewhere
            Note over API: Automatic seat conflict resolution
            API->>WS: Broadcast removal from previous class
            API->>WS: Broadcast addition to new class
            WS-->>UI: Update both class views in real-time
            Note over UI: Student moves between classes seamlessly
        end
    end

    %% Seat Reset Functionality
    rect rgb(255, 240, 248)
        Note over T,DB: 8. Seat Reset (Menu System)
        T->>UI: Click three-dot menu (â‹®)
        UI-->>T: Show dropdown menu
        T->>UI: Select "Reset All Seats"
        UI->>API: POST /api/v1/classes/X58E9647/reset-seats
        API->>DB: UPDATE class_enrollments SET seat_number = NULL
        DB-->>API: All seats reset
        API->>WS: Broadcast reset event
        WS-->>UI: Real-time reset update
        UI-->>T: All students show as unseated
        Note over UI: Seat numbers reset to null
    end

    %% Error Handling & WebSocket Management
    rect rgb(248, 248, 248)
        Note over UI,DB: 9. Error Handling & WebSocket Reliability
        Note over DB: Database constraints prevent conflicts
        Note over DB: - Unique student per class (seat assignment)
        Note over DB: - Unique seat per class
        Note over DB: - Foreign key constraints
        Note over UI: Frontend validation
        Note over UI: - Score range 0-100 (Redux only)
        Note over UI: - Disabled controls for guests
        Note over WS: Singleton WebSocket with auto-reconnection
        Note over WS: - Exponential backoff (up to 10 attempts)
        Note over WS: - Heartbeat/ping-pong every 30 seconds
        Note over WS: - Graceful connection cleanup
        Note over API: Graceful error responses with CORS
    end